{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","props","state","items","text","isVerified","handleChange","bind","handleSubmit","handleOnChange","value","console","log","this","setState","style","border","width","margin","sitekey","onChange","onSubmit","htmlFor","dir","id","disabled","length","e","target","preventDefault","newItem","Date","now","concat","React","Component","TodoList","map","item","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+NAEMA,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,MAAQ,CAAEC,MAAO,GAAIC,KAAM,GAAIC,YAAY,GAChD,EAAKC,aAAe,EAAKA,aAAaC,KAAlB,gBACpB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBACpB,EAAKE,eAAiB,EAAKA,eAAeF,KAApB,gBALL,E,kDAOnB,SAAeG,GACbC,QAAQC,IAAI,iBAAkBF,GAC9BG,KAAKC,SAAS,CAACT,YAAa,M,oBAE9B,WACE,OACE,sBAAKU,MAAO,CAACC,OAAO,kBAAmBC,MAAM,QAAQC,OAAO,UAA5D,UACG,cAAC,IAAD,CACGC,QAAQ,2CACRC,SAAUP,KAAKJ,iBAEjB,uBACF,2DACA,cAAC,EAAD,CAAUN,MAAOU,KAAKX,MAAMC,QAC5B,uBAAMkB,SAAUR,KAAKL,aAArB,UACE,uBAAOc,QAAQ,WAAWP,MAAO,CAACQ,IAAI,OAAtC,4JAGA,uBACEC,GAAG,WACHJ,SAAUP,KAAKP,aACfI,MAAOG,KAAKX,MAAME,OAGpB,yBAAQqB,UAAWZ,KAAKX,MAAMG,WAA9B,kBACQQ,KAAKX,MAAMC,MAAMuB,OAAS,a,0BAO1C,SAAaC,GACXd,KAAKC,SAAS,CAAEV,KAAMuB,EAAEC,OAAOlB,U,0BAGjC,SAAaiB,GAEX,GADAA,EAAEE,iBAC6B,IAA3BhB,KAAKX,MAAME,KAAKsB,OAApB,CAGA,IAAMI,EAAU,CACd1B,KAAMS,KAAKX,MAAME,KACjBoB,GAAIO,KAAKC,OAEXnB,KAAKC,UAAS,SAAAZ,GAAK,MAAK,CACtBC,MAAOD,EAAMC,MAAM8B,OAAOH,GAC1B1B,KAAM,Y,GAvDM8B,IAAMC,WA4DlBC,E,4JACJ,WACE,OACE,6BACGvB,KAAKZ,MAAME,MAAMkC,KAAI,SAAAC,GAAI,OACxB,6BAAmBA,EAAKlC,MAAfkC,EAAKd,a,GALDU,IAAMC,WAYdnC,IC9DAuC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.4660d16e.chunk.js","sourcesContent":["import React from \"react\";\nimport ReCAPTCHA from \"react-google-recaptcha\";\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { items: [], text: '' ,isVerified: false};\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n    this.handleOnChange = this.handleOnChange.bind(this);\n  }\n  handleOnChange(value) {\n    console.log(\"Captcha value:\", value);\n    this.setState({isVerified : true})\n  }\n  render() {\n    return (\n      <div style={{border:\"2px solid black\", width:\"500px\",margin:\"0 auto\"}}>\n         <ReCAPTCHA\n            sitekey=\"6LdCcwYdAAAAAA26C9E3P1SojX57MjZDwbfbK47n\"\n            onChange={this.handleOnChange}\n          />\n          <br/>\n        <h3>لیست:</h3>\n        <TodoList items={this.state.items} />\n        <form onSubmit={this.handleSubmit}>\n          <label htmlFor=\"new-todo\" style={{dir:\"rtl\"}}>\n            چه کارهایی باید انجام بشود؟\n          </label>\n          <input\n            id=\"new-todo\"\n            onChange={this.handleChange}\n            value={this.state.text}\n          />\n      \n          <button disabled={!this.state.isVerified}>\n            Add #{this.state.items.length + 1}\n          </button>\n        </form>\n      </div>\n    );\n  }\n\n  handleChange(e) {\n    this.setState({ text: e.target.value });\n  }\n\n  handleSubmit(e) {\n    e.preventDefault();\n    if (this.state.text.length === 0) {\n      return;\n    }\n    const newItem = {\n      text: this.state.text,\n      id: Date.now()\n    };\n    this.setState(state => ({\n      items: state.items.concat(newItem),\n      text: ''\n    }));\n  }\n}\n\nclass TodoList extends React.Component {\n  render() {\n    return (\n      <ul>\n        {this.props.items.map(item => (\n          <li key={item.id}>{item.text}</li>\n        ))}\n      </ul>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}